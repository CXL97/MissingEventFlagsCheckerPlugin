using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PKHeX.Core;

namespace MissingEventFlagsCheckerPlugin
{
    internal class FlagsGen2GS : FlagsOrganizer
    {

        protected override void InitFlagsData(SaveFile savFile)
        {
            m_savFile = savFile;
            m_eventFlags = (m_savFile as IEventFlagArray).GetEventFlags();
            m_missingEventFlagsList.Clear();
        }


        public override void MarkFlags(FlagType flagType)
        {
            ChangeFlagsVal(flagType, value:true);
        }

        public override void UnmarkFlags(FlagType flagType)
        {
            ChangeFlagsVal(flagType, value:false);
        }


        void ChangeFlagsVal(FlagType flagType, bool value)
        {
            var flagHelper = (m_savFile as IEventFlagArray);

            switch (flagType)
            {
                case FlagType.FieldItem:
                    // Johto items
                    for (int i = 0x643; i <= 0x6BC; ++i)
                        flagHelper.SetEventFlag(i, value);
                    // Kanto items
                    for (int i = 0x77D; i <= 0x78B; ++i)
                        flagHelper.SetEventFlag(i, value);
                    break;

                case FlagType.HiddenItem:
                    // Johto hidden items
                    for (int i = 0x07D; i <= 0x0B8; ++i)
                        flagHelper.SetEventFlag(i, value);
                    // Kanto hidden items
                    for (int i = 0x0E4; i <= 0x0FE; ++i)
                        flagHelper.SetEventFlag(i, value);
                    break;

                case FlagType.TrainerBattle:
                    // Trainers
                    for (int i = 0x3E8; i <= 0x5BC; ++i)
                        flagHelper.SetEventFlag(i, value);
                    break;
            }
        }


        protected override void CheckAllMissingFlags()
        {
            // Hidden Items
            CheckMissingFlag(0x07D, FlagType.HiddenItem, "", "TIN_TOWER_4F_HIDDEN_MAX_POTION");
            CheckMissingFlag(0x07E, FlagType.HiddenItem, "", "TIN_TOWER_5F_HIDDEN_FULL_RESTORE");
            CheckMissingFlag(0x07F, FlagType.HiddenItem, "", "TIN_TOWER_5F_HIDDEN_CARBOS");
            CheckMissingFlag(0x080, FlagType.HiddenItem, "", "BURNED_TOWER_1F_HIDDEN_ETHER");
            CheckMissingFlag(0x081, FlagType.HiddenItem, "", "BURNED_TOWER_B1F_HIDDEN_ULTRA_BALL");
            CheckMissingFlag(0x082, FlagType.HiddenItem, "", "BURNED_TOWER_B1F_HIDDEN_BURN_HEAL");
            CheckMissingFlag(0x083, FlagType.HiddenItem, "", "BURNED_TOWER_B1F_HIDDEN_NUGGET");
            CheckMissingFlag(0x084, FlagType.HiddenItem, "", "NATIONAL_PARK_HIDDEN_FULL_HEAL");
            CheckMissingFlag(0x085, FlagType.HiddenItem, "", "OLIVINE_LIGHTHOUSE_5F_HIDDEN_HYPER_POTION");
            CheckMissingFlag(0x086, FlagType.HiddenItem, "", "TEAM_ROCKET_BASE_B1F_HIDDEN_REVIVE");
            CheckMissingFlag(0x087, FlagType.HiddenItem, "", "TEAM_ROCKET_BASE_B2F_HIDDEN_FULL_HEAL");
            CheckMissingFlag(0x088, FlagType.HiddenItem, "", "ILEX_FOREST_HIDDEN_ETHER");
            CheckMissingFlag(0x089, FlagType.HiddenItem, "", "ILEX_FOREST_HIDDEN_SUPER_POTION");
            CheckMissingFlag(0x08A, FlagType.HiddenItem, "", "ILEX_FOREST_HIDDEN_FULL_HEAL");
            CheckMissingFlag(0x08B, FlagType.HiddenItem, "", "GOLDENROD_UNDERGROUND_HIDDEN_PARLYZ_HEAL");
            CheckMissingFlag(0x08C, FlagType.HiddenItem, "", "GOLDENROD_UNDERGROUND_HIDDEN_SUPER_POTION");
            CheckMissingFlag(0x08D, FlagType.HiddenItem, "", "GOLDENROD_UNDERGROUND_HIDDEN_ANTIDOTE");
            CheckMissingFlag(0x08E, FlagType.HiddenItem, "", "GOLDENROD_UNDERGROUND_SWITCH_ROOM_ENTRANCES_HIDDEN_MAX_POTION");
            CheckMissingFlag(0x08F, FlagType.HiddenItem, "", "GOLDENROD_UNDERGROUND_SWITCH_ROOM_ENTRANCES_HIDDEN_REVIVE");
            CheckMissingFlag(0x090, FlagType.HiddenItem, "", "MOUNT_MORTAR_1F_OUTSIDE_HIDDEN_HYPER_POTION");
            CheckMissingFlag(0x091, FlagType.HiddenItem, "", "MOUNT_MORTAR_1F_INSIDE_HIDDEN_MAX_REPEL");
            CheckMissingFlag(0x092, FlagType.HiddenItem, "", "MOUNT_MORTAR_2F_INSIDE_HIDDEN_FULL_RESTORE");
            CheckMissingFlag(0x093, FlagType.HiddenItem, "", "MOUNT_MORTAR_B1F_HIDDEN_MAX_REVIVE");
            CheckMissingFlag(0x094, FlagType.HiddenItem, "", "ICE_PATH_B1F_HIDDEN_MAX_POTION");
            CheckMissingFlag(0x095, FlagType.HiddenItem, "", "ICE_PATH_B2F_MAHOGANY_SIDE_HIDDEN_CARBOS");
            CheckMissingFlag(0x096, FlagType.HiddenItem, "", "ICE_PATH_B2F_BLACKTHORN_SIDE_HIDDEN_ICE_HEAL");
            CheckMissingFlag(0x097, FlagType.HiddenItem, "", "WHIRL_ISLAND_B1F_HIDDEN_RARE_CANDY");
            CheckMissingFlag(0x098, FlagType.HiddenItem, "", "WHIRL_ISLAND_B1F_HIDDEN_ULTRA_BALL");
            CheckMissingFlag(0x099, FlagType.HiddenItem, "", "WHIRL_ISLAND_B1F_HIDDEN_FULL_RESTORE");
            CheckMissingFlag(0x09A, FlagType.HiddenItem, "", "SILVER_CAVE_ROOM_1_HIDDEN_DIRE_HIT");
            CheckMissingFlag(0x09B, FlagType.HiddenItem, "", "SILVER_CAVE_ROOM_1_HIDDEN_ULTRA_BALL");
            CheckMissingFlag(0x09C, FlagType.HiddenItem, "", "SILVER_CAVE_ROOM_2_HIDDEN_MAX_POTION");
            CheckMissingFlag(0x09D, FlagType.HiddenItem, "", "DARK_CAVE_VIOLET_ENTRANCE_HIDDEN_ELIXER");
            CheckMissingFlag(0x09E, FlagType.HiddenItem, "", "VICTORY_ROAD_HIDDEN_MAX_POTION");
            CheckMissingFlag(0x09F, FlagType.HiddenItem, "", "VICTORY_ROAD_HIDDEN_FULL_HEAL");
            CheckMissingFlag(0x0A0, FlagType.HiddenItem, "", "DRAGONS_DEN_B1F_HIDDEN_REVIVE");
            CheckMissingFlag(0x0A1, FlagType.HiddenItem, "", "DRAGONS_DEN_B1F_HIDDEN_MAX_POTION");
            CheckMissingFlag(0x0A2, FlagType.HiddenItem, "", "DRAGONS_DEN_B1F_HIDDEN_MAX_ELIXER");
            CheckMissingFlag(0x0A3, FlagType.HiddenItem, "", "ROUTE_28_HIDDEN_RARE_CANDY");
            CheckMissingFlag(0x0A4, FlagType.HiddenItem, "", "ROUTE_30_HIDDEN_POTION");
            CheckMissingFlag(0x0A5, FlagType.HiddenItem, "", "ROUTE_32_HIDDEN_GREAT_BALL");
            CheckMissingFlag(0x0A6, FlagType.HiddenItem, "", "ROUTE_32_HIDDEN_SUPER_POTION");
            CheckMissingFlag(0x0A7, FlagType.HiddenItem, "", "ROUTE_34_HIDDEN_RARE_CANDY");
            CheckMissingFlag(0x0A8, FlagType.HiddenItem, "", "ROUTE_34_HIDDEN_SUPER_POTION");
            CheckMissingFlag(0x0A9, FlagType.HiddenItem, "", "ROUTE_37_HIDDEN_ETHER");
            CheckMissingFlag(0x0AA, FlagType.HiddenItem, "", "ROUTE_39_HIDDEN_NUGGET");
            CheckMissingFlag(0x0AB, FlagType.HiddenItem, "", "ROUTE_40_HIDDEN_HYPER_POTION");
            CheckMissingFlag(0x0AC, FlagType.HiddenItem, "", "ROUTE_41_HIDDEN_MAX_ETHER");
            CheckMissingFlag(0x0AD, FlagType.HiddenItem, "", "ROUTE_42_HIDDEN_MAX_POTION");
            CheckMissingFlag(0x0AE, FlagType.HiddenItem, "", "ROUTE_44_HIDDEN_ELIXER");
            CheckMissingFlag(0x0AF, FlagType.HiddenItem, "", "ROUTE_45_HIDDEN_PP_UP");
            CheckMissingFlag(0x0B0, FlagType.HiddenItem, "", "VIOLET_CITY_HIDDEN_HYPER_POTION");
            CheckMissingFlag(0x0B1, FlagType.HiddenItem, "", "AZALEA_TOWN_HIDDEN_FULL_HEAL");
            CheckMissingFlag(0x0B2, FlagType.HiddenItem, "", "CIANWOOD_CITY_HIDDEN_REVIVE");
            CheckMissingFlag(0x0B3, FlagType.HiddenItem, "", "CIANWOOD_CITY_HIDDEN_MAX_ETHER");
            CheckMissingFlag(0x0B4, FlagType.HiddenItem, "", "ECRUTEAK_CITY_HIDDEN_HYPER_POTION");
            CheckMissingFlag(0x0B5, FlagType.HiddenItem, "", "LAKE_OF_RAGE_HIDDEN_FULL_RESTORE");
            CheckMissingFlag(0x0B6, FlagType.HiddenItem, "", "LAKE_OF_RAGE_HIDDEN_RARE_CANDY");
            CheckMissingFlag(0x0B7, FlagType.HiddenItem, "", "LAKE_OF_RAGE_HIDDEN_MAX_POTION");
            CheckMissingFlag(0x0B8, FlagType.HiddenItem, "", "SILVER_CAVE_OUTSIDE_HIDDEN_FULL_RESTORE");

            CheckMissingFlag(0x0E4, FlagType.HiddenItem, "", "DIGLETTS_CAVE_HIDDEN_MAX_REVIVE");
            CheckMissingFlag(0x0E5, FlagType.HiddenItem, "", "UNDERGROUND_PATH_HIDDEN_FULL_RESTORE");
            CheckMissingFlag(0x0E6, FlagType.HiddenItem, "", "UNDERGROUND_PATH_HIDDEN_X_SPECIAL");
            CheckMissingFlag(0x0E7, FlagType.HiddenItem, "", "ROCK_TUNNEL_1F_HIDDEN_X_ACCURACY");
            CheckMissingFlag(0x0E8, FlagType.HiddenItem, "", "ROCK_TUNNEL_1F_HIDDEN_X_DEFEND");
            CheckMissingFlag(0x0E9, FlagType.HiddenItem, "", "ROCK_TUNNEL_B1F_HIDDEN_MAX_POTION");
            CheckMissingFlag(0x0EA, FlagType.HiddenItem, "", "OLIVINE_PORT_HIDDEN_PROTEIN");
            CheckMissingFlag(0x0EB, FlagType.HiddenItem, "", "VERMILION_PORT_HIDDEN_IRON");
            CheckMissingFlag(0x0EC, FlagType.HiddenItem, "", "MOUNT_MOON_SQUARE_HIDDEN_MOON_STONE");
            CheckMissingFlag(0x0ED, FlagType.HiddenItem, "", "ROUTE_2_HIDDEN_MAX_ETHER");
            CheckMissingFlag(0x0EE, FlagType.HiddenItem, "", "ROUTE_2_HIDDEN_FULL_HEAL");
            CheckMissingFlag(0x0EF, FlagType.HiddenItem, "", "ROUTE_2_HIDDEN_FULL_RESTORE");
            CheckMissingFlag(0x0F0, FlagType.HiddenItem, "", "ROUTE_2_HIDDEN_REVIVE");
            CheckMissingFlag(0x0F1, FlagType.HiddenItem, "", "ROUTE_4_HIDDEN_ULTRA_BALL");
            CheckMissingFlag(0x0F2, FlagType.HiddenItem, "", "ROUTE_9_HIDDEN_ETHER");
            CheckMissingFlag(0x0F3, FlagType.HiddenItem, "", "ROUTE_12_HIDDEN_ELIXER");
            CheckMissingFlag(0x0F4, FlagType.HiddenItem, "", "ROUTE_13_HIDDEN_CALCIUM");
            CheckMissingFlag(0x0F5, FlagType.HiddenItem, "", "ROUTE_11_HIDDEN_REVIVE");
            CheckMissingFlag(0x0F6, FlagType.HiddenItem, "", "ROUTE_17_HIDDEN_MAX_ETHER");
            CheckMissingFlag(0x0F7, FlagType.HiddenItem, "", "ROUTE_17_HIDDEN_MAX_ELIXER");
            CheckMissingFlag(0x0F8, FlagType.HiddenItem, "", "ROUTE_25_HIDDEN_POTION");
            CheckMissingFlag(0x0F9, FlagType.HiddenItem, "", "FOUND_LEFTOVERS_IN_CELADON_CAFE");
            CheckMissingFlag(0x0FA, FlagType.HiddenItem, "", "FOUND_BERSERK_GENE_IN_CERULEAN_CITY");
            CheckMissingFlag(0x0FB, FlagType.HiddenItem, "", "FOUND_MACHINE_PART_IN_CERULEAN_GYM");
            CheckMissingFlag(0x0FC, FlagType.HiddenItem, "", "VERMILION_CITY_HIDDEN_FULL_HEAL");
            CheckMissingFlag(0x0FD, FlagType.HiddenItem, "", "CELADON_CITY_HIDDEN_PP_UP");
            CheckMissingFlag(0x0FE, FlagType.HiddenItem, "", "CINNABAR_ISLAND_HIDDEN_RARE_CANDY");

            // Field items
            CheckMissingFlag(0x643, FlagType.FieldItem, "", "VIOLET_CITY_PP_UP");
            CheckMissingFlag(0x644, FlagType.FieldItem, "", "VIOLET_CITY_RARE_CANDY");
            CheckMissingFlag(0x645, FlagType.FieldItem, "", "LAKE_OF_RAGE_MAX_ETHER");
            CheckMissingFlag(0x646, FlagType.FieldItem, "", "LAKE_OF_RAGE_TM_DETECT");
            CheckMissingFlag(0x647, FlagType.FieldItem, "", "SPROUT_TOWER_1F_PARLYZ_HEAL");
            CheckMissingFlag(0x648, FlagType.FieldItem, "", "SPROUT_TOWER_2F_X_DEFEND");
            CheckMissingFlag(0x649, FlagType.FieldItem, "", "SPROUT_TOWER_3F_POTION");
            CheckMissingFlag(0x64A, FlagType.FieldItem, "", "SPROUT_TOWER_3F_ESCAPE_ROPE");
            CheckMissingFlag(0x64B, FlagType.FieldItem, "", "TIN_TOWER_3F_FULL_HEAL");
            CheckMissingFlag(0x64C, FlagType.FieldItem, "", "TIN_TOWER_4F_ULTRA_BALL");
            CheckMissingFlag(0x64D, FlagType.FieldItem, "", "TIN_TOWER_4F_SUPER_POTION");
            CheckMissingFlag(0x64E, FlagType.FieldItem, "", "TIN_TOWER_4F_ESCAPE_ROPE");
            CheckMissingFlag(0x64F, FlagType.FieldItem, "", "TIN_TOWER_5F_RARE_CANDY");
            CheckMissingFlag(0x650, FlagType.FieldItem, "", "TIN_TOWER_7F_MAX_REVIVE");
            CheckMissingFlag(0x651, FlagType.FieldItem, "", "TIN_TOWER_8F_NUGGET");
            CheckMissingFlag(0x652, FlagType.FieldItem, "", "TIN_TOWER_8F_MAX_ELIXER");
            CheckMissingFlag(0x653, FlagType.FieldItem, "", "TIN_TOWER_8F_FULL_RESTORE");
            CheckMissingFlag(0x654, FlagType.FieldItem, "", "BURNED_TOWER_1F_X_SPEED");
            CheckMissingFlag(0x655, FlagType.FieldItem, "", "BURNED_TOWER_1F_BURN_HEAL");
            CheckMissingFlag(0x656, FlagType.FieldItem, "", "BURNED_TOWER_B1F_HP_UP");
            CheckMissingFlag(0x657, FlagType.FieldItem, "", "BURNED_TOWER_B1F_TM_ENDURE");
            CheckMissingFlag(0x658, FlagType.FieldItem, "", "NATIONAL_PARK_PARLYZ_HEAL");
            CheckMissingFlag(0x659, FlagType.FieldItem, "", "NATIONAL_PARK_TM_DIG");
            CheckMissingFlag(0x65A, FlagType.FieldItem, "", "UNION_CAVE_1F_GREAT_BALL");
            CheckMissingFlag(0x65B, FlagType.FieldItem, "", "UNION_CAVE_1F_POTION");
            CheckMissingFlag(0x65C, FlagType.FieldItem, "", "UNION_CAVE_1F_X_ATTACK");
            CheckMissingFlag(0x65D, FlagType.FieldItem, "", "UNION_CAVE_1F_AWAKENING");
            CheckMissingFlag(0x65E, FlagType.FieldItem, "", "UNION_CAVE_B1F_TM_SWIFT");
            CheckMissingFlag(0x65F, FlagType.FieldItem, "", "UNION_CAVE_B1F_X_DEFEND");
            CheckMissingFlag(0x660, FlagType.FieldItem, "", "UNION_CAVE_B2F_ELIXER");
            CheckMissingFlag(0x661, FlagType.FieldItem, "", "UNION_CAVE_B2F_HYPER_POTION");
            CheckMissingFlag(0x662, FlagType.FieldItem, "", "SLOWPOKE_WELL_B1F_SUPER_POTION");
            CheckMissingFlag(0x663, FlagType.FieldItem, "", "SLOWPOKE_WELL_B2F_TM_RAIN_DANCE");
            CheckMissingFlag(0x664, FlagType.FieldItem, "", "OLIVINE_LIGHTHOUSE_3F_ETHER");
            CheckMissingFlag(0x665, FlagType.FieldItem, "", "OLIVINE_LIGHTHOUSE_5F_RARE_CANDY");
            CheckMissingFlag(0x666, FlagType.FieldItem, "", "OLIVINE_LIGHTHOUSE_5F_GREAT_BALL");
            CheckMissingFlag(0x667, FlagType.FieldItem, "", "OLIVINE_LIGHTHOUSE_5F_TM_SWAGGER");
            CheckMissingFlag(0x668, FlagType.FieldItem, "", "OLIVINE_LIGHTHOUSE_6F_SUPER_POTION");
            CheckMissingFlag(0x669, FlagType.FieldItem, "", "TEAM_ROCKET_BASE_B1F_HYPER_POTION");
            CheckMissingFlag(0x66A, FlagType.FieldItem, "", "TEAM_ROCKET_BASE_B1F_NUGGET");
            CheckMissingFlag(0x66B, FlagType.FieldItem, "", "TEAM_ROCKET_BASE_B1F_X_ACCURACY");
            CheckMissingFlag(0x66C, FlagType.FieldItem, "", "TEAM_ROCKET_BASE_B2F_TM_THIEF");
            CheckMissingFlag(0x66D, FlagType.FieldItem, "", "TEAM_ROCKET_BASE_B3F_FULL_HEAL");
            CheckMissingFlag(0x66E, FlagType.FieldItem, "", "TEAM_ROCKET_BASE_B3F_DIRE_HIT");
            CheckMissingFlag(0x66F, FlagType.FieldItem, "", "TEAM_ROCKET_BASE_B3F_PROTEIN");
            CheckMissingFlag(0x670, FlagType.FieldItem, "", "TEAM_ROCKET_BASE_B3F_ICE_HEAL");
            CheckMissingFlag(0x671, FlagType.FieldItem, "", "ILEX_FOREST_REVIVE");
            CheckMissingFlag(0x672, FlagType.FieldItem, "", "GOLDENROD_UNDERGROUND_COIN_CASE");
            CheckMissingFlag(0x673, FlagType.FieldItem, "", "GOLDENROD_UNDERGROUND_SWITCH_ROOM_ENTRANCES_SMOKE_BALL");
            CheckMissingFlag(0x674, FlagType.FieldItem, "", "GOLDENROD_UNDERGROUND_SWITCH_ROOM_ENTRANCES_FULL_HEAL");
            CheckMissingFlag(0x675, FlagType.FieldItem, "", "GOLDENROD_DEPT_STORE_B1F_ETHER");
            CheckMissingFlag(0x676, FlagType.FieldItem, "", "GOLDENROD_DEPT_STORE_B1F_AMULET_COIN");
            CheckMissingFlag(0x677, FlagType.FieldItem, "", "GOLDENROD_DEPT_STORE_B1F_BURN_HEAL");
            CheckMissingFlag(0x678, FlagType.FieldItem, "", "GOLDENROD_DEPT_STORE_B1F_ULTRA_BALL");
            CheckMissingFlag(0x679, FlagType.FieldItem, "", "GOLDENROD_UNDERGROUND_WAREHOUSE_MAX_ETHER");
            CheckMissingFlag(0x67A, FlagType.FieldItem, "", "GOLDENROD_UNDERGROUND_WAREHOUSE_TM_SLEEP_TALK");
            CheckMissingFlag(0x67B, FlagType.FieldItem, "", "MOUNT_MORTAR_1F_OUTSIDE_ETHER");
            CheckMissingFlag(0x67C, FlagType.FieldItem, "", "MOUNT_MORTAR_1F_OUTSIDE_REVIVE");
            CheckMissingFlag(0x67D, FlagType.FieldItem, "", "MOUNT_MORTAR_1F_INSIDE_ESCAPE_ROPE");
            CheckMissingFlag(0x67E, FlagType.FieldItem, "", "MOUNT_MORTAR_1F_INSIDE_MAX_REVIVE");
            CheckMissingFlag(0x67F, FlagType.FieldItem, "", "MOUNT_MORTAR_1F_INSIDE_HYPER_POTION");
            CheckMissingFlag(0x680, FlagType.FieldItem, "", "MOUNT_MORTAR_2F_INSIDE_MAX_POTION");
            CheckMissingFlag(0x681, FlagType.FieldItem, "", "MOUNT_MORTAR_2F_INSIDE_RARE_CANDY");
            CheckMissingFlag(0x682, FlagType.FieldItem, "", "MOUNT_MORTAR_2F_INSIDE_TM_DEFENSE_CURL");
            CheckMissingFlag(0x683, FlagType.FieldItem, "", "MOUNT_MORTAR_2F_INSIDE_DRAGON_SCALE");
            CheckMissingFlag(0x684, FlagType.FieldItem, "", "MOUNT_MORTAR_2F_INSIDE_ELIXER");
            CheckMissingFlag(0x685, FlagType.FieldItem, "", "MOUNT_MORTAR_2F_INSIDE_ESCAPE_ROPE");
            CheckMissingFlag(0x686, FlagType.FieldItem, "", "MOUNT_MORTAR_B1F_HYPER_POTION");
            CheckMissingFlag(0x687, FlagType.FieldItem, "", "MOUNT_MORTAR_B1F_FULL_HEAL");
            CheckMissingFlag(0x688, FlagType.FieldItem, "", "GOT_HM07_WATERFALL");
            CheckMissingFlag(0x689, FlagType.FieldItem, "", "ICE_PATH_1F_PP_UP");
            CheckMissingFlag(0x68A, FlagType.FieldItem, "", "ICE_PATH_B1F_IRON");
            CheckMissingFlag(0x68B, FlagType.FieldItem, "", "ICE_PATH_B2F_MAHOGANY_SIDE_FULL_HEAL");
            CheckMissingFlag(0x68C, FlagType.FieldItem, "", "ICE_PATH_B2F_MAHOGANY_SIDE_MAX_POTION");
            CheckMissingFlag(0x68D, FlagType.FieldItem, "", "ICE_PATH_B2F_BLACKTHORN_SIDE_TM_REST");
            CheckMissingFlag(0x68E, FlagType.FieldItem, "", "ICE_PATH_B3F_NEVERMELTICE");
            CheckMissingFlag(0x68F, FlagType.FieldItem, "", "WHIRL_ISLAND_NE_ULTRA_BALL");
            CheckMissingFlag(0x690, FlagType.FieldItem, "", "WHIRL_ISLAND_SW_GUARD_SPEC");
            CheckMissingFlag(0x691, FlagType.FieldItem, "", "WHIRL_ISLAND_B1F_FULL_RESTORE");
            CheckMissingFlag(0x692, FlagType.FieldItem, "", "WHIRL_ISLAND_B1F_CARBOS");
            CheckMissingFlag(0x693, FlagType.FieldItem, "", "WHIRL_ISLAND_B1F_CALCIUM");
            CheckMissingFlag(0x694, FlagType.FieldItem, "", "WHIRL_ISLAND_B1F_NUGGET");
            CheckMissingFlag(0x695, FlagType.FieldItem, "", "WHIRL_ISLAND_B1F_ESCAPE_ROPE");
            CheckMissingFlag(0x696, FlagType.FieldItem, "", "WHIRL_ISLAND_B2F_FULL_RESTORE");
            CheckMissingFlag(0x697, FlagType.FieldItem, "", "WHIRL_ISLAND_B2F_MAX_REVIVE");
            CheckMissingFlag(0x698, FlagType.FieldItem, "", "WHIRL_ISLAND_B2F_MAX_ELIXER");
            CheckMissingFlag(0x699, FlagType.FieldItem, "", "SILVER_CAVE_ROOM_1_MAX_ELIXER");
            CheckMissingFlag(0x69A, FlagType.FieldItem, "", "SILVER_CAVE_ROOM_1_X_ACCURACY");
            CheckMissingFlag(0x69B, FlagType.FieldItem, "", "SILVER_CAVE_ROOM_1_ESCAPE_ROPE");
            CheckMissingFlag(0x69C, FlagType.FieldItem, "", "SILVER_CAVE_ITEM_ROOMS_MAX_REVIVE");
            CheckMissingFlag(0x69D, FlagType.FieldItem, "", "SILVER_CAVE_ITEM_ROOMS_FULL_RESTORE");
            CheckMissingFlag(0x69E, FlagType.FieldItem, "", "DARK_CAVE_VIOLET_ENTRANCE_POTION");
            CheckMissingFlag(0x69F, FlagType.FieldItem, "", "DARK_CAVE_VIOLET_ENTRANCE_FULL_HEAL");
            CheckMissingFlag(0x6A0, FlagType.FieldItem, "", "DARK_CAVE_VIOLET_ENTRANCE_HYPER_POTION");
            CheckMissingFlag(0x6A1, FlagType.FieldItem, "", "DARK_CAVE_BLACKTHORN_ENTRANCE_REVIVE");
            CheckMissingFlag(0x6A2, FlagType.FieldItem, "", "DARK_CAVE_BLACKTHORN_ENTRANCE_TM_SNORE");
            CheckMissingFlag(0x6A3, FlagType.FieldItem, "", "VICTORY_ROAD_TM_EARTHQUAKE");
            CheckMissingFlag(0x6A4, FlagType.FieldItem, "", "VICTORY_ROAD_MAX_REVIVE");
            CheckMissingFlag(0x6A5, FlagType.FieldItem, "", "VICTORY_ROAD_FULL_RESTORE");
            CheckMissingFlag(0x6A6, FlagType.FieldItem, "", "VICTORY_ROAD_FULL_HEAL");
            CheckMissingFlag(0x6A7, FlagType.FieldItem, "", "VICTORY_ROAD_X_SPECIAL");
            CheckMissingFlag(0x6A8, FlagType.FieldItem, "", "DRAGONS_DEN_B1F_DRAGON_FANG");
            CheckMissingFlag(0x6A9, FlagType.FieldItem, "", "TOHJO_FALLS_MOON_STONE");
            CheckMissingFlag(0x6AA, FlagType.FieldItem, "", "ROUTE_26_MAX_ELIXER");
            CheckMissingFlag(0x6AB, FlagType.FieldItem, "", "ROUTE_27_TM_SOLARBEAM");
            CheckMissingFlag(0x6AC, FlagType.FieldItem, "", "ROUTE_27_RARE_CANDY");
            CheckMissingFlag(0x6AD, FlagType.FieldItem, "", "ROUTE_29_POTION");
            CheckMissingFlag(0x6AE, FlagType.FieldItem, "", "ROUTE_31_ANTIDOTE");
            CheckMissingFlag(0x6AF, FlagType.FieldItem, "", "ROUTE_31_POKE_BALL");
            CheckMissingFlag(0x6B0, FlagType.FieldItem, "", "ROUTE_32_GREAT_BALL");
            CheckMissingFlag(0x6B1, FlagType.FieldItem, "", "ROUTE_32_POTION");
            CheckMissingFlag(0x6B2, FlagType.FieldItem, "", "ROUTE_35_TM_ROLLOUT");
            CheckMissingFlag(0x6B3, FlagType.FieldItem, "", "ROUTE_42_ULTRA_BALL");
            CheckMissingFlag(0x6B4, FlagType.FieldItem, "", "ROUTE_42_SUPER_POTION");
            CheckMissingFlag(0x6B5, FlagType.FieldItem, "", "ROUTE_43_MAX_ETHER");
            CheckMissingFlag(0x6B6, FlagType.FieldItem, "", "ROUTE_44_MAX_REVIVE");
            CheckMissingFlag(0x6B7, FlagType.FieldItem, "", "ROUTE_44_ULTRA_BALL");
            CheckMissingFlag(0x6B8, FlagType.FieldItem, "", "ROUTE_45_X_SPECIAL");
            CheckMissingFlag(0x6B9, FlagType.FieldItem, "", "ROUTE_45_REVIVE");
            CheckMissingFlag(0x6BA, FlagType.FieldItem, "", "ROUTE_45_ELIXER");
            CheckMissingFlag(0x6BB, FlagType.FieldItem, "", "ROUTE_45_MAX_POTION");
            CheckMissingFlag(0x6BC, FlagType.FieldItem, "", "ROUTE_46_DIRE_HIT");

            CheckMissingFlag(0x77D, FlagType.FieldItem, "", "PICKED_UP_FOCUS_BAND");
            CheckMissingFlag(0x77E, FlagType.FieldItem, "", "ROCK_TUNNEL_1F_ELIXER");
            CheckMissingFlag(0x77F, FlagType.FieldItem, "", "ROCK_TUNNEL_1F_TM_STEEL_WING");
            CheckMissingFlag(0x780, FlagType.FieldItem, "", "ROCK_TUNNEL_B1F_IRON");
            CheckMissingFlag(0x781, FlagType.FieldItem, "", "ROCK_TUNNEL_B1F_PP_UP");
            CheckMissingFlag(0x782, FlagType.FieldItem, "", "ROCK_TUNNEL_B1F_REVIVE");
            CheckMissingFlag(0x783, FlagType.FieldItem, "", "ROUTE_2_DIRE_HIT");
            CheckMissingFlag(0x784, FlagType.FieldItem, "", "ROUTE_2_MAX_POTION");
            CheckMissingFlag(0x785, FlagType.FieldItem, "", "ROUTE_2_CARBOS");
            CheckMissingFlag(0x786, FlagType.FieldItem, "", "ROUTE_2_ELIXER");
            CheckMissingFlag(0x787, FlagType.FieldItem, "", "ROUTE_4_HP_UP");
            CheckMissingFlag(0x788, FlagType.FieldItem, "", "ROUTE_12_CALCIUM");
            CheckMissingFlag(0x789, FlagType.FieldItem, "", "ROUTE_12_NUGGET");
            CheckMissingFlag(0x78A, FlagType.FieldItem, "", "ROUTE_15_PP_UP");
            CheckMissingFlag(0x78B, FlagType.FieldItem, "", "ROUTE_25_PROTEIN");

            // Other Events
            CheckMissingFlag(0x008, FlagType.GeneralEvent, "", "GOT_TM31_MUD_SLAP");
            CheckMissingFlag(0x009, FlagType.GeneralEvent, "", "GOT_TM49_FURY_CUTTER");
            CheckMissingFlag(0x00A, FlagType.GeneralEvent, "", "GOT_TM01_DYNAMICPUNCH");
            CheckMissingFlag(0x00B, FlagType.GeneralEvent, "", "GOT_TM45_ATTRACT");
            CheckMissingFlag(0x00C, FlagType.GeneralEvent, "", "GOT_TM30_SHADOW_BALL");
            CheckMissingFlag(0x00D, FlagType.GeneralEvent, "", "GOT_TM23_IRON_TAIL");
            CheckMissingFlag(0x00E, FlagType.GeneralEvent, "", "GOT_TM16_ICY_WIND");
            CheckMissingFlag(0x00F, FlagType.GeneralEvent, "", "GOT_TM24_DRAGONBREATH");
            CheckMissingFlag(0x010, FlagType.GeneralEvent, "", "GOT_HM01_CUT");
            CheckMissingFlag(0x011, FlagType.GeneralEvent, "", "GOT_HM02_FLY");
            CheckMissingFlag(0x012, FlagType.GeneralEvent, "", "GOT_HM03_SURF");
            CheckMissingFlag(0x013, FlagType.GeneralEvent, "", "GOT_HM04_STRENGTH");
            CheckMissingFlag(0x014, FlagType.GeneralEvent, "", "GOT_HM05_FLASH");
            CheckMissingFlag(0x015, FlagType.GeneralEvent, "", "GOT_HM06_WHIRLPOOL");
            CheckMissingFlag(0x017, FlagType.GeneralEvent, "", "GOT_OLD_ROD");
            CheckMissingFlag(0x018, FlagType.GeneralEvent, "", "GOT_GOOD_ROD");
            CheckMissingFlag(0x019, FlagType.GeneralEvent, "", "GOT_SUPER_ROD");
            CheckMissingFlag(0x01A, FlagType.GeneralEvent, "", "GOT_A_POKEMON_FROM_ELM");
            CheckMissingFlag(0x01E, FlagType.GeneralEvent, "", "GOT_MYSTERY_EGG_FROM_MR_POKEMON");
            CheckMissingFlag(0x023, FlagType.GeneralEvent, "", "GOT_SECRETPOTION_FROM_PHARMACY");
            CheckMissingFlag(0x024, FlagType.GeneralEvent, "", "GOT_SS_TICKET_FROM_ELM");
            CheckMissingFlag(0x027, FlagType.GeneralEvent, "", "GOT_BERRY_FROM_ROUTE_30_HOUSE");
            CheckMissingFlag(0x02A, FlagType.GeneralEvent, "", "FOUGHT_SUDOWOODO");
            CheckMissingFlag(0x02D, FlagType.GeneralEvent, "", "GOT_TOGEPI_EGG_FROM_ELMS_AIDE");
            CheckMissingFlag(0x035, FlagType.GeneralEvent, "", "KURT_GAVE_YOU_LURE_BALL");
            CheckMissingFlag(0x03E, FlagType.GeneralEvent, "", "GOT_TM13_SNORE_FROM_MOOMOO_FARM");
            CheckMissingFlag(0x045, FlagType.GeneralEvent, "", "GOT_SHUCKIE");
            CheckMissingFlag(0x046, FlagType.GeneralEvent, "", "MANIA_TOOK_SHUCKIE_OR_LET_YOU_KEEP_HIM");
            CheckMissingFlag(0x047, FlagType.GeneralEvent, "", "GOT_SUNNY_DAY_FROM_RADIO_TOWER");
            CheckMissingFlag(0x048, FlagType.GeneralEvent, "", "GOT_PINK_BOW_FROM_MARY");
            CheckMissingFlag(0x04A, FlagType.GeneralEvent, "", "RECEIVED_CARD_KEY");
            CheckMissingFlag(0x04B, FlagType.GeneralEvent, "", "GOT_TM08_ROCK_SMASH");
            CheckMissingFlag(0x04D, FlagType.GeneralEvent, "", "GOT_MYSTIC_WATER_IN_CHERRYGROVE");
            CheckMissingFlag(0x04E, FlagType.GeneralEvent, "", "GOT_TM05_ROAR");
            CheckMissingFlag(0x04F, FlagType.GeneralEvent, "", "GOT_EEVEE");
            CheckMissingFlag(0x050, FlagType.GeneralEvent, "", "GOT_KENYA");
            CheckMissingFlag(0x052, FlagType.GeneralEvent, "", "GOT_HP_UP_FROM_RANDY");
            CheckMissingFlag(0x053, FlagType.GeneralEvent, "", "GOT_TM50_NIGHTMARE");
            CheckMissingFlag(0x056, FlagType.GeneralEvent, "", "GOT_EVERSTONE_FROM_ELM");
            CheckMissingFlag(0x057, FlagType.GeneralEvent, "", "GOT_QUICK_CLAW");
            CheckMissingFlag(0x058, FlagType.GeneralEvent, "", "GOT_TM10_HIDDEN_POWER");
            CheckMissingFlag(0x059, FlagType.GeneralEvent, "", "GOT_TM36_SLUDGE_BOMB");
            CheckMissingFlag(0x05A, FlagType.GeneralEvent, "", "GOT_ITEMFINDER");
            CheckMissingFlag(0x05B, FlagType.GeneralEvent, "", "GOT_BICYCLE");
            CheckMissingFlag(0x05C, FlagType.GeneralEvent, "", "GOT_SQUIRTBOTTLE");
            CheckMissingFlag(0x05D, FlagType.GeneralEvent, "", "GOT_MIRACLE_SEED_IN_ROUTE_32");
            CheckMissingFlag(0x05E, FlagType.GeneralEvent, "", "GOT_CHARCOAL_IN_CHARCOAL_KILN");
            CheckMissingFlag(0x05F, FlagType.GeneralEvent, "", "GOT_TM02_HEADBUTT");
            CheckMissingFlag(0x061, FlagType.GeneralEvent, "", "GOT_TYROGUE_FROM_KIYO");
            CheckMissingFlag(0x063, FlagType.GeneralEvent, "", "GOT_POISON_BARB_FROM_FRIEDA");
            CheckMissingFlag(0x065, FlagType.GeneralEvent, "", "GOT_PINK_BOW_FROM_TUSCANY");
            CheckMissingFlag(0x067, FlagType.GeneralEvent, "", "GOT_HARD_STONE_FROM_ARTHUR");
            CheckMissingFlag(0x069, FlagType.GeneralEvent, "", "GOT_MAGNET_FROM_SUNNY");
            CheckMissingFlag(0x06B, FlagType.GeneralEvent, "", "GOT_BLACKBELT_FROM_WESLEY");
            CheckMissingFlag(0x06D, FlagType.GeneralEvent, "", "GOT_SPELL_TAG_FROM_SANTOS");
            CheckMissingFlag(0x06F, FlagType.GeneralEvent, "", "GOT_SHARP_BEAK_FROM_MONICA");
            CheckMissingFlag(0x070, FlagType.GeneralEvent, "", "GOT_SOFT_SAND_FROM_KATE");
            CheckMissingFlag(0x071, FlagType.GeneralEvent, "", "GOT_METAL_COAT_FROM_GRANDPA_ON_SS_AQUA");
            CheckMissingFlag(0x072, FlagType.GeneralEvent, "", "GOT_BLACKGLASSES_IN_DARK_CAVE");
            CheckMissingFlag(0x073, FlagType.GeneralEvent, "", "GOT_KINGS_ROCK_IN_SLOWPOKE_WELL");
            CheckMissingFlag(0x074, FlagType.GeneralEvent, "", "GOT_TM47_STEEL_WING");
            CheckMissingFlag(0x075, FlagType.GeneralEvent, "", "GOT_TM37_SANDSTORM");
            CheckMissingFlag(0x078, FlagType.GeneralEvent, "", "GOT_RAINBOW_WING");
            CheckMissingFlag(0x079, FlagType.GeneralEvent, "", "GOT_SILVER_WING");
            CheckMissingFlag(0x07A, FlagType.GeneralEvent, "", "GOT_TM12_SWEET_SCENT");
            CheckMissingFlag(0x07B, FlagType.GeneralEvent, "", "RELEASED_THE_BEASTS");
            CheckMissingFlag(0x07C, FlagType.GeneralEvent, "", "GOT_MASTER_BALL_FROM_ELM");

            CheckMissingFlag(0x0C8, FlagType.GeneralEvent, "", "GOT_NUGGET_FROM_GUY");
            CheckMissingFlag(0x0CD, FlagType.GeneralEvent, "", "RESTORED_POWER_TO_KANTO");
            CheckMissingFlag(0x0CE, FlagType.GeneralEvent, "", "GOT_COINS_FROM_GAMBLER_AT_CELADON");
            CheckMissingFlag(0x0D1, FlagType.GeneralEvent, "", "GOT_PASS_FROM_COPYCAT");
            CheckMissingFlag(0x0D2, FlagType.GeneralEvent, "", "GOT_LOST_ITEM_FROM_FAN_CLUB");
            CheckMissingFlag(0x0D6, FlagType.GeneralEvent, "", "ENABLE_DIPLOMA_PRINTING");
            CheckMissingFlag(0x0DA, FlagType.GeneralEvent, "", "GOT_TM03_CURSE");
            CheckMissingFlag(0x0DB, FlagType.GeneralEvent, "", "GOT_CLEANSE_TAG");
            CheckMissingFlag(0x0DC, FlagType.GeneralEvent, "", "GOT_TM19_GIGA_DRAIN");
            CheckMissingFlag(0x0DD, FlagType.GeneralEvent, "", "GOT_TM06_TOXIC");
            CheckMissingFlag(0x0DE, FlagType.GeneralEvent, "", "GOT_UP_GRADE");
            CheckMissingFlag(0x0DF, FlagType.GeneralEvent, "", "GOT_TM07_ZAP_CANNON");
            CheckMissingFlag(0x0E0, FlagType.GeneralEvent, "", "GOT_TM42_DREAM_EATER");
            CheckMissingFlag(0x0E2, FlagType.GeneralEvent, "", "GOT_HP_UP_FROM_VERMILION_GUY");
            CheckMissingFlag(0x0E3, FlagType.GeneralEvent, "", "GOT_TM29_PSYCHIC");

            CheckMissingFlag(0x265, FlagType.GeneralEvent, "", "GOT_PROTEIN_FROM_HUEY");
            CheckMissingFlag(0x266, FlagType.GeneralEvent, "", "GOT_HP_UP_FROM_JOEY");
            CheckMissingFlag(0x267, FlagType.GeneralEvent, "", "GOT_CARBOS_FROM_VANCE");
            CheckMissingFlag(0x268, FlagType.GeneralEvent, "", "GOT_IRON_FROM_PARRY");
            CheckMissingFlag(0x269, FlagType.GeneralEvent, "", "GOT_CALCIUM_FROM_ERIN");
            //CheckMissingFlag(0x26A, FlagType.GeneralEvent, "", "GOT_KENJI_ON_BREAK");

            CheckMissingFlag(0x2A0, FlagType.GeneralEvent, "", "SOLVED_HO_OH_PUZZLE");
            CheckMissingFlag(0x2A1, FlagType.GeneralEvent, "", "SOLVED_KABUTO_PUZZLE");
            CheckMissingFlag(0x2A2, FlagType.GeneralEvent, "", "SOLVED_OMANYTE_PUZZLE");
            CheckMissingFlag(0x2A3, FlagType.GeneralEvent, "", "SOLVED_AERODACTYL_PUZZLE");

            CheckMissingFlag(0x2A4, FlagType.GeneralEvent, "", "DECO_BED_1");
            CheckMissingFlag(0x2A5, FlagType.GeneralEvent, "", "DECO_BED_2");
            CheckMissingFlag(0x2A6, FlagType.GeneralEvent, "", "DECO_BED_3");
            CheckMissingFlag(0x2A7, FlagType.GeneralEvent, "", "DECO_BED_4");
            CheckMissingFlag(0x2A8, FlagType.GeneralEvent, "", "DECO_CARPET_1");
            CheckMissingFlag(0x2A9, FlagType.GeneralEvent, "", "DECO_CARPET_2");
            CheckMissingFlag(0x2AA, FlagType.GeneralEvent, "", "DECO_CARPET_3");
            CheckMissingFlag(0x2AB, FlagType.GeneralEvent, "", "DECO_CARPET_4");
            CheckMissingFlag(0x2AC, FlagType.GeneralEvent, "", "DECO_PLANT_1");
            CheckMissingFlag(0x2AD, FlagType.GeneralEvent, "", "DECO_PLANT_2");
            CheckMissingFlag(0x2AE, FlagType.GeneralEvent, "", "DECO_PLANT_3");
            CheckMissingFlag(0x2AF, FlagType.GeneralEvent, "", "DECO_POSTER_1");
            CheckMissingFlag(0x2B0, FlagType.GeneralEvent, "", "DECO_POSTER_2");
            CheckMissingFlag(0x2B1, FlagType.GeneralEvent, "", "DECO_POSTER_3");
            CheckMissingFlag(0x2B2, FlagType.GeneralEvent, "", "DECO_POSTER_4");
            CheckMissingFlag(0x2B3, FlagType.GeneralEvent, "", "DECO_FAMICOM");
            CheckMissingFlag(0x2B4, FlagType.GeneralEvent, "", "DECO_SNES");
            CheckMissingFlag(0x2B5, FlagType.GeneralEvent, "", "DECO_N64");
            CheckMissingFlag(0x2B6, FlagType.GeneralEvent, "", "DECO_VIRTUAL_BOY");
            CheckMissingFlag(0x2B7, FlagType.GeneralEvent, "", "DECO_PIKACHU_DOLL");
            CheckMissingFlag(0x2B8, FlagType.GeneralEvent, "", "DECO_SURFING_PIKACHU_DOLL");
            CheckMissingFlag(0x2B9, FlagType.GeneralEvent, "", "DECO_CLEFAIRY_DOLL");
            CheckMissingFlag(0x2BA, FlagType.GeneralEvent, "", "DECO_JIGGLYPUFF_DOLL");
            CheckMissingFlag(0x2BB, FlagType.GeneralEvent, "", "DECO_BULBASAUR_DOLL");
            CheckMissingFlag(0x2BC, FlagType.GeneralEvent, "", "DECO_CHARMANDER_DOLL");
            CheckMissingFlag(0x2BD, FlagType.GeneralEvent, "", "DECO_SQUIRTLE_DOLL");
            CheckMissingFlag(0x2BE, FlagType.GeneralEvent, "", "DECO_POLIWAG_DOLL");
            CheckMissingFlag(0x2BF, FlagType.GeneralEvent, "", "DECO_DIGLETT_DOLL");
            CheckMissingFlag(0x2C0, FlagType.GeneralEvent, "", "DECO_STARMIE_DOLL");
            CheckMissingFlag(0x2C1, FlagType.GeneralEvent, "", "DECO_MAGIKARP_DOLL");
            CheckMissingFlag(0x2C2, FlagType.GeneralEvent, "", "DECO_ODDISH_DOLL");
            CheckMissingFlag(0x2C3, FlagType.GeneralEvent, "", "DECO_GENGAR_DOLL");
            CheckMissingFlag(0x2C4, FlagType.GeneralEvent, "", "DECO_SHELLDER_DOLL");
            CheckMissingFlag(0x2C5, FlagType.GeneralEvent, "", "DECO_GRIMER_DOLL");
            CheckMissingFlag(0x2C6, FlagType.GeneralEvent, "", "DECO_VOLTORB_DOLL");
            CheckMissingFlag(0x2C7, FlagType.GeneralEvent, "", "DECO_WEEDLE_DOLL");
            CheckMissingFlag(0x2C8, FlagType.GeneralEvent, "", "DECO_UNOWN_DOLL");
            CheckMissingFlag(0x2C9, FlagType.GeneralEvent, "", "DECO_GEODUDE_DOLL");
            CheckMissingFlag(0x2CA, FlagType.GeneralEvent, "", "DECO_MACHOP_DOLL");
            CheckMissingFlag(0x2CB, FlagType.GeneralEvent, "", "DECO_TENTACOOL_DOLL");
            CheckMissingFlag(0x2CC, FlagType.GeneralEvent, "", "PLAYERS_ROOM_POSTER");
            CheckMissingFlag(0x2CD, FlagType.GeneralEvent, "", "DECO_GOLD_TROPHY");
            CheckMissingFlag(0x2CE, FlagType.GeneralEvent, "", "DECO_SILVER_TROPHY");
            CheckMissingFlag(0x2CF, FlagType.GeneralEvent, "", "DECO_BIG_SNORLAX_DOLL");
            CheckMissingFlag(0x2D0, FlagType.GeneralEvent, "", "DECO_BIG_ONIX_DOLL");
            CheckMissingFlag(0x2D1, FlagType.GeneralEvent, "", "DECO_BIG_LAPRAS_DOLL");

            CheckMissingFlag(0x317, FlagType.GeneralEvent, "", "FOUGHT_HO_OH");
            CheckMissingFlag(0x318, FlagType.GeneralEvent, "", "FOUGHT_LUGIA");
            CheckMissingFlag(0x319, FlagType.GeneralEvent, "", "BEAT_RIVAL_IN_MT_MOON");
            CheckMissingFlag(0x320, FlagType.GeneralEvent, "", "GOT_EVERSTONE_FROM_BILLS_GRANDPA");
            CheckMissingFlag(0x321, FlagType.GeneralEvent, "", "GOT_LEAF_STONE_FROM_BILLS_GRANDPA");
            CheckMissingFlag(0x322, FlagType.GeneralEvent, "", "GOT_WATER_STONE_FROM_BILLS_GRANDPA");
            CheckMissingFlag(0x323, FlagType.GeneralEvent, "", "GOT_FIRE_STONE_FROM_BILLS_GRANDPA");
            CheckMissingFlag(0x324, FlagType.GeneralEvent, "", "GOT_THUNDERSTONE_FROM_BILLS_GRANDPA");

            CheckMissingFlag(0x3E8, FlagType.TrainerBattle, "", "SWIMMERF_ELAINE");
            CheckMissingFlag(0x3E9, FlagType.TrainerBattle, "", "SWIMMERF_PAULA");
            CheckMissingFlag(0x3EA, FlagType.TrainerBattle, "", "SWIMMERF_KAYLEE");
            CheckMissingFlag(0x3EB, FlagType.TrainerBattle, "", "SWIMMERF_SUSIE");
            CheckMissingFlag(0x3EC, FlagType.TrainerBattle, "", "SWIMMERF_DENISE");
            CheckMissingFlag(0x3ED, FlagType.TrainerBattle, "", "SWIMMERF_KARA");
            CheckMissingFlag(0x3EE, FlagType.TrainerBattle, "", "SWIMMERF_WENDY");
            CheckMissingFlag(0x3EF, FlagType.TrainerBattle, "", "SWIMMERF_LISA");
            CheckMissingFlag(0x3F0, FlagType.TrainerBattle, "", "SWIMMERF_JILL");
            CheckMissingFlag(0x3F1, FlagType.TrainerBattle, "", "SWIMMERF_MARY");
            CheckMissingFlag(0x3F2, FlagType.TrainerBattle, "", "SWIMMERF_KATIE");
            CheckMissingFlag(0x3F3, FlagType.TrainerBattle, "", "SWIMMERF_DAWN");
            CheckMissingFlag(0x3F4, FlagType.TrainerBattle, "", "SWIMMERF_TARA");
            CheckMissingFlag(0x3F5, FlagType.TrainerBattle, "", "SWIMMERF_NICOLE");
            CheckMissingFlag(0x3F6, FlagType.TrainerBattle, "", "SWIMMERF_LORI");
            CheckMissingFlag(0x3F7, FlagType.TrainerBattle, "", "SWIMMERF_JODY");
            CheckMissingFlag(0x3F8, FlagType.TrainerBattle, "", "SWIMMERF_NIKKI");
            CheckMissingFlag(0x3F9, FlagType.TrainerBattle, "", "SWIMMERF_DIANA");
            CheckMissingFlag(0x3FA, FlagType.TrainerBattle, "", "SWIMMERF_BRIANA");
            CheckMissingFlag(0x3FB, FlagType.TrainerBattle, "", "BIRD_KEEPER_ROD");
            CheckMissingFlag(0x3FC, FlagType.TrainerBattle, "", "BIRD_KEEPER_ABE");
            CheckMissingFlag(0x3FD, FlagType.TrainerBattle, "", "BIRD_KEEPER_BRYAN");
            CheckMissingFlag(0x3FE, FlagType.TrainerBattle, "", "BIRD_KEEPER_THEO");
            CheckMissingFlag(0x3FF, FlagType.TrainerBattle, "", "BIRD_KEEPER_TOBY");
            CheckMissingFlag(0x400, FlagType.TrainerBattle, "", "BIRD_KEEPER_DENIS");
            CheckMissingFlag(0x401, FlagType.TrainerBattle, "", "BIRD_KEEPER_VANCE");
            CheckMissingFlag(0x402, FlagType.TrainerBattle, "", "BIRD_KEEPER_HANK");
            CheckMissingFlag(0x403, FlagType.TrainerBattle, "", "BIRD_KEEPER_ROY");
            CheckMissingFlag(0x404, FlagType.TrainerBattle, "", "BIRD_KEEPER_BORIS");
            CheckMissingFlag(0x405, FlagType.TrainerBattle, "", "BIRD_KEEPER_BOB");
            CheckMissingFlag(0x406, FlagType.TrainerBattle, "", "BIRD_KEEPER_JOSE");
            CheckMissingFlag(0x407, FlagType.TrainerBattle, "", "BIRD_KEEPER_PETER");
            CheckMissingFlag(0x408, FlagType.TrainerBattle, "", "BIRD_KEEPER_JOSE2");
            CheckMissingFlag(0x409, FlagType.TrainerBattle, "", "BIRD_KEEPER_PERRY");
            CheckMissingFlag(0x40A, FlagType.TrainerBattle, "", "BIRD_KEEPER_BRET");
            CheckMissingFlag(0x40B, FlagType.TrainerBattle, "", "BIRD_KEEPER_JOSE3");
            CheckMissingFlag(0x40C, FlagType.TrainerBattle, "", "BIRD_KEEPER_VANCE2");
            CheckMissingFlag(0x40D, FlagType.TrainerBattle, "", "BIRD_KEEPER_VANCE3");
            CheckMissingFlag(0x40E, FlagType.TrainerBattle, "", "BOARDER_RONALD");
            CheckMissingFlag(0x40F, FlagType.TrainerBattle, "", "BOARDER_BRAD");
            CheckMissingFlag(0x410, FlagType.TrainerBattle, "", "BOARDER_DOUGLAS");
            CheckMissingFlag(0x411, FlagType.TrainerBattle, "", "SAGE_CHOW");
            CheckMissingFlag(0x412, FlagType.TrainerBattle, "", "SAGE_NICO");
            CheckMissingFlag(0x413, FlagType.TrainerBattle, "", "SAGE_JIN");
            CheckMissingFlag(0x414, FlagType.TrainerBattle, "", "SAGE_TROY");
            CheckMissingFlag(0x415, FlagType.TrainerBattle, "", "SAGE_JEFFREY");
            CheckMissingFlag(0x416, FlagType.TrainerBattle, "", "SAGE_PING");
            CheckMissingFlag(0x417, FlagType.TrainerBattle, "", "SAGE_EDMOND");
            CheckMissingFlag(0x418, FlagType.TrainerBattle, "", "SAGE_NEAL");
            CheckMissingFlag(0x419, FlagType.TrainerBattle, "", "SAGE_LI");
            CheckMissingFlag(0x41A, FlagType.TrainerBattle, "", "CAMPER_ROLAND");
            CheckMissingFlag(0x41B, FlagType.TrainerBattle, "", "CAMPER_TODD");
            CheckMissingFlag(0x41C, FlagType.TrainerBattle, "", "CAMPER_IVAN");
            CheckMissingFlag(0x41D, FlagType.TrainerBattle, "", "CAMPER_ELLIOT");
            CheckMissingFlag(0x41E, FlagType.TrainerBattle, "", "CAMPER_BARRY");
            CheckMissingFlag(0x41F, FlagType.TrainerBattle, "", "CAMPER_LLOYD");
            CheckMissingFlag(0x420, FlagType.TrainerBattle, "", "CAMPER_DEAN");
            CheckMissingFlag(0x421, FlagType.TrainerBattle, "", "CAMPER_SID");
            CheckMissingFlag(0x422, FlagType.TrainerBattle, "", "CAMPER_HERVEY");
            CheckMissingFlag(0x423, FlagType.TrainerBattle, "", "CAMPER_DALE");
            CheckMissingFlag(0x424, FlagType.TrainerBattle, "", "CAMPER_TED");
            CheckMissingFlag(0x425, FlagType.TrainerBattle, "", "CAMPER_TODD2");
            CheckMissingFlag(0x426, FlagType.TrainerBattle, "", "CAMPER_TODD3");
            CheckMissingFlag(0x427, FlagType.TrainerBattle, "", "CAMPER_THOMAS");
            CheckMissingFlag(0x428, FlagType.TrainerBattle, "", "CAMPER_LEROY");
            CheckMissingFlag(0x429, FlagType.TrainerBattle, "", "CAMPER_DAVID");
            CheckMissingFlag(0x42A, FlagType.TrainerBattle, "", "CAMPER_JOHN");
            CheckMissingFlag(0x42B, FlagType.TrainerBattle, "", "CAMPER_JERRY");
            CheckMissingFlag(0x42C, FlagType.TrainerBattle, "", "CAMPER_SPENCER");
            CheckMissingFlag(0x42D, FlagType.TrainerBattle, "", "BURGLAR_DUNCAN");
            CheckMissingFlag(0x42E, FlagType.TrainerBattle, "", "BURGLAR_EDDIE");
            CheckMissingFlag(0x42F, FlagType.TrainerBattle, "", "BURGLAR_COREY");
            //CheckMissingFlag(0x430, FlagType.TrainerBattle, "", "unused");
            CheckMissingFlag(0x431, FlagType.TrainerBattle, "", "BIKER_BENNY");
            CheckMissingFlag(0x432, FlagType.TrainerBattle, "", "BIKER_KAZU");
            CheckMissingFlag(0x433, FlagType.TrainerBattle, "", "BIKER_DWAYNE");
            CheckMissingFlag(0x434, FlagType.TrainerBattle, "", "BIKER_HARRIS");
            CheckMissingFlag(0x435, FlagType.TrainerBattle, "", "BIKER_ZEKE");
            CheckMissingFlag(0x436, FlagType.TrainerBattle, "", "BIKER_CHARLES");
            CheckMissingFlag(0x437, FlagType.TrainerBattle, "", "BIKER_RILEY");
            CheckMissingFlag(0x438, FlagType.TrainerBattle, "", "BIKER_JOEL");
            CheckMissingFlag(0x439, FlagType.TrainerBattle, "", "BIKER_GLENN");
            CheckMissingFlag(0x43A, FlagType.TrainerBattle, "", "PSYCHIC_NATHAN");
            CheckMissingFlag(0x43B, FlagType.TrainerBattle, "", "PSYCHIC_FRANKLIN");
            CheckMissingFlag(0x43C, FlagType.TrainerBattle, "", "PSYCHIC_HERMAN");
            CheckMissingFlag(0x43D, FlagType.TrainerBattle, "", "PSYCHIC_FIDEL");
            CheckMissingFlag(0x43E, FlagType.TrainerBattle, "", "PSYCHIC_GREG");
            CheckMissingFlag(0x43F, FlagType.TrainerBattle, "", "PSYCHIC_NORMAN");
            CheckMissingFlag(0x440, FlagType.TrainerBattle, "", "PSYCHIC_MARK");
            CheckMissingFlag(0x441, FlagType.TrainerBattle, "", "PSYCHIC_PHIL");
            CheckMissingFlag(0x442, FlagType.TrainerBattle, "", "PSYCHIC_RICHARD");
            CheckMissingFlag(0x443, FlagType.TrainerBattle, "", "PSYCHIC_GILBERT");
            CheckMissingFlag(0x444, FlagType.TrainerBattle, "", "PSYCHIC_JARED");
            CheckMissingFlag(0x445, FlagType.TrainerBattle, "", "PSYCHIC_RODNEY");
            CheckMissingFlag(0x446, FlagType.TrainerBattle, "", "FIREBREATHER_OTIS");
            CheckMissingFlag(0x447, FlagType.TrainerBattle, "", "FIREBREATHER_DICK");
            CheckMissingFlag(0x448, FlagType.TrainerBattle, "", "FIREBREATHER_NED");
            CheckMissingFlag(0x449, FlagType.TrainerBattle, "", "FIREBREATHER_BURT");
            CheckMissingFlag(0x44A, FlagType.TrainerBattle, "", "FIREBREATHER_BILL");
            CheckMissingFlag(0x44B, FlagType.TrainerBattle, "", "FIREBREATHER_WALT");
            CheckMissingFlag(0x44C, FlagType.TrainerBattle, "", "FIREBREATHER_RAY");
            CheckMissingFlag(0x44D, FlagType.TrainerBattle, "", "FIREBREATHER_LYLE");
            CheckMissingFlag(0x44E, FlagType.TrainerBattle, "", "FISHER_JUSTIN");
            CheckMissingFlag(0x44F, FlagType.TrainerBattle, "", "FISHER_RALPH");
            CheckMissingFlag(0x450, FlagType.TrainerBattle, "", "FISHER_ARNOLD");
            CheckMissingFlag(0x451, FlagType.TrainerBattle, "", "FISHER_KYLE");
            CheckMissingFlag(0x452, FlagType.TrainerBattle, "", "FISHER_HENRY");
            CheckMissingFlag(0x453, FlagType.TrainerBattle, "", "FISHER_MARVIN");
            CheckMissingFlag(0x454, FlagType.TrainerBattle, "", "FISHER_CHRIS");
            CheckMissingFlag(0x455, FlagType.TrainerBattle, "", "FISHER_ANDRE");
            CheckMissingFlag(0x456, FlagType.TrainerBattle, "", "FISHER_RAYMOND");
            CheckMissingFlag(0x457, FlagType.TrainerBattle, "", "FISHER_WILTON");
            CheckMissingFlag(0x458, FlagType.TrainerBattle, "", "FISHER_EDGAR");
            CheckMissingFlag(0x459, FlagType.TrainerBattle, "", "FISHER_JONAH");
            CheckMissingFlag(0x45A, FlagType.TrainerBattle, "", "FISHER_MARTIN");
            CheckMissingFlag(0x45B, FlagType.TrainerBattle, "", "FISHER_STEPHEN");
            CheckMissingFlag(0x45C, FlagType.TrainerBattle, "", "FISHER_BARNEY");
            CheckMissingFlag(0x45D, FlagType.TrainerBattle, "", "FISHER_RALPH2");
            CheckMissingFlag(0x45E, FlagType.TrainerBattle, "", "FISHER_RALPH3");
            CheckMissingFlag(0x45F, FlagType.TrainerBattle, "", "FISHER_CHRIS2");
            CheckMissingFlag(0x460, FlagType.TrainerBattle, "", "FISHER_CHRIS3");
            CheckMissingFlag(0x461, FlagType.TrainerBattle, "", "FISHER_WILTON2");
            CheckMissingFlag(0x462, FlagType.TrainerBattle, "", "FISHER_SCOTT");
            CheckMissingFlag(0x463, FlagType.TrainerBattle, "", "FISHER_WILTON3");
            CheckMissingFlag(0x464, FlagType.TrainerBattle, "", "TWINS_AMY_AND_MAY");
            CheckMissingFlag(0x465, FlagType.TrainerBattle, "", "TWINS_ANN_AND_ANNE");
            CheckMissingFlag(0x466, FlagType.TrainerBattle, "", "TWINS_ANN_AND_ANNE2");
            CheckMissingFlag(0x467, FlagType.TrainerBattle, "", "TWINS_AMY_AND_MAY2");
            CheckMissingFlag(0x468, FlagType.TrainerBattle, "", "TWINS_JO_AND_ZOE");
            CheckMissingFlag(0x469, FlagType.TrainerBattle, "", "TWINS_JO_AND_ZOE2");
            CheckMissingFlag(0x46A, FlagType.TrainerBattle, "", "TWINS_MEG_AND_PEG");
            CheckMissingFlag(0x46B, FlagType.TrainerBattle, "", "TWINS_MEG_AND_PEG2");
            CheckMissingFlag(0x46C, FlagType.TrainerBattle, "", "SCHOOLBOY_JACK");
            CheckMissingFlag(0x46D, FlagType.TrainerBattle, "", "SCHOOLBOY_KIP");
            CheckMissingFlag(0x46E, FlagType.TrainerBattle, "", "SCHOOLBOY_ALAN");
            CheckMissingFlag(0x46F, FlagType.TrainerBattle, "", "SCHOOLBOY_JOHNNY");
            CheckMissingFlag(0x470, FlagType.TrainerBattle, "", "SCHOOLBOY_DANNY");
            CheckMissingFlag(0x471, FlagType.TrainerBattle, "", "SCHOOLBOY_TOMMY");
            CheckMissingFlag(0x472, FlagType.TrainerBattle, "", "SCHOOLBOY_DUDLEY");
            CheckMissingFlag(0x473, FlagType.TrainerBattle, "", "SCHOOLBOY_JOE");
            CheckMissingFlag(0x474, FlagType.TrainerBattle, "", "SCHOOLBOY_BILLY");
            CheckMissingFlag(0x475, FlagType.TrainerBattle, "", "SCHOOLBOY_CHAD");
            CheckMissingFlag(0x476, FlagType.TrainerBattle, "", "SCHOOLBOY_NATE");
            CheckMissingFlag(0x477, FlagType.TrainerBattle, "", "SCHOOLBOY_RICKY");
            CheckMissingFlag(0x478, FlagType.TrainerBattle, "", "SCHOOLBOY_JACK2");
            CheckMissingFlag(0x479, FlagType.TrainerBattle, "", "SCHOOLBOY_JACK3");
            CheckMissingFlag(0x47A, FlagType.TrainerBattle, "", "SCHOOLBOY_ALAN2");
            CheckMissingFlag(0x47B, FlagType.TrainerBattle, "", "SCHOOLBOY_ALAN3");
            CheckMissingFlag(0x47C, FlagType.TrainerBattle, "", "SCHOOLBOY_CHAD2");
            CheckMissingFlag(0x47D, FlagType.TrainerBattle, "", "SCHOOLBOY_CHAD3");
            CheckMissingFlag(0x47E, FlagType.TrainerBattle, "", "PICNICKER_LIZ");
            CheckMissingFlag(0x47F, FlagType.TrainerBattle, "", "PICNICKER_GINA");
            CheckMissingFlag(0x480, FlagType.TrainerBattle, "", "PICNICKER_BROOKE");
            CheckMissingFlag(0x481, FlagType.TrainerBattle, "", "PICNICKER_KIM");
            CheckMissingFlag(0x482, FlagType.TrainerBattle, "", "PICNICKER_CINDY");
            CheckMissingFlag(0x483, FlagType.TrainerBattle, "", "PICNICKER_HOPE");
            CheckMissingFlag(0x484, FlagType.TrainerBattle, "", "PICNICKER_SHARON");
            CheckMissingFlag(0x485, FlagType.TrainerBattle, "", "PICNICKER_DEBRA");
            CheckMissingFlag(0x486, FlagType.TrainerBattle, "", "PICNICKER_GINA2");
            CheckMissingFlag(0x487, FlagType.TrainerBattle, "", "PICNICKER_ERIN");
            CheckMissingFlag(0x488, FlagType.TrainerBattle, "", "PICNICKER_LIZ2");
            CheckMissingFlag(0x489, FlagType.TrainerBattle, "", "PICNICKER_LIZ3");
            CheckMissingFlag(0x48A, FlagType.TrainerBattle, "", "PICNICKER_HEIDI");
            CheckMissingFlag(0x48B, FlagType.TrainerBattle, "", "PICNICKER_EDNA");
            CheckMissingFlag(0x48C, FlagType.TrainerBattle, "", "PICNICKER_GINA3");
            CheckMissingFlag(0x48D, FlagType.TrainerBattle, "", "PICNICKER_TIFFANY2");
            CheckMissingFlag(0x48E, FlagType.TrainerBattle, "", "PICNICKER_TIFFANY3");
            CheckMissingFlag(0x48F, FlagType.TrainerBattle, "", "PICNICKER_ERIN2");
            CheckMissingFlag(0x490, FlagType.TrainerBattle, "", "PICNICKER_TANYA");
            CheckMissingFlag(0x491, FlagType.TrainerBattle, "", "PICNICKER_TIFFANY");
            CheckMissingFlag(0x492, FlagType.TrainerBattle, "", "PICNICKER_ERIN3");
            CheckMissingFlag(0x493, FlagType.TrainerBattle, "", "GUITARIST_CLYDE");
            CheckMissingFlag(0x494, FlagType.TrainerBattle, "", "GUITARIST_VINCENT");
            CheckMissingFlag(0x495, FlagType.TrainerBattle, "", "JUGGLER_IRWIN");
            CheckMissingFlag(0x496, FlagType.TrainerBattle, "", "JUGGLER_FRITZ");
            CheckMissingFlag(0x497, FlagType.TrainerBattle, "", "JUGGLER_HORTON");
            CheckMissingFlag(0x498, FlagType.TrainerBattle, "", "JUGGLER_IRWIN2");
            CheckMissingFlag(0x499, FlagType.TrainerBattle, "", "JUGGLER_IRWIN3");
            CheckMissingFlag(0x49A, FlagType.TrainerBattle, "", "GENTLEMAN_PRESTON");
            CheckMissingFlag(0x49B, FlagType.TrainerBattle, "", "GENTLEMAN_EDWARD");
            CheckMissingFlag(0x49C, FlagType.TrainerBattle, "", "GENTLEMAN_GREGORY");
            CheckMissingFlag(0x49D, FlagType.TrainerBattle, "", "GENTLEMAN_VIRGIL");
            CheckMissingFlag(0x49E, FlagType.TrainerBattle, "", "GENTLEMAN_ALFRED");
            CheckMissingFlag(0x49F, FlagType.TrainerBattle, "", "SCIENTIST_ROSS");
            CheckMissingFlag(0x4A0, FlagType.TrainerBattle, "", "SCIENTIST_MITCH");
            CheckMissingFlag(0x4A1, FlagType.TrainerBattle, "", "SCIENTIST_JED");
            CheckMissingFlag(0x4A2, FlagType.TrainerBattle, "", "SCIENTIST_MARC");
            CheckMissingFlag(0x4A3, FlagType.TrainerBattle, "", "SCIENTIST_RICH");
            CheckMissingFlag(0x4A4, FlagType.TrainerBattle, "", "BLACKBELT_KENJI2");
            CheckMissingFlag(0x4A5, FlagType.TrainerBattle, "", "BLACKBELT_YOSHI");
            CheckMissingFlag(0x4A6, FlagType.TrainerBattle, "", "BLACKBELT_KENJI3");
            CheckMissingFlag(0x4A7, FlagType.TrainerBattle, "", "BLACKBELT_LAO");
            CheckMissingFlag(0x4A8, FlagType.TrainerBattle, "", "BLACKBELT_NOB");
            CheckMissingFlag(0x4A9, FlagType.TrainerBattle, "", "BLACKBELT_KIYO");
            CheckMissingFlag(0x4AA, FlagType.TrainerBattle, "", "BLACKBELT_LUNG");
            CheckMissingFlag(0x4AB, FlagType.TrainerBattle, "", "BLACKBELT_KENJI");
            CheckMissingFlag(0x4AC, FlagType.TrainerBattle, "", "BLACKBELT_WAI");
            CheckMissingFlag(0x4AD, FlagType.TrainerBattle, "", "BEAUTY_VICTORIA");
            CheckMissingFlag(0x4AE, FlagType.TrainerBattle, "", "BEAUTY_SAMANTHA");
            CheckMissingFlag(0x4AF, FlagType.TrainerBattle, "", "BEAUTY_JULIE");
            CheckMissingFlag(0x4B0, FlagType.TrainerBattle, "", "BEAUTY_JACLYN");
            CheckMissingFlag(0x4B1, FlagType.TrainerBattle, "", "BEAUTY_BRENDA");
            CheckMissingFlag(0x4B2, FlagType.TrainerBattle, "", "BEAUTY_CASSIE");
            CheckMissingFlag(0x4B3, FlagType.TrainerBattle, "", "BEAUTY_CAROLINE");
            CheckMissingFlag(0x4B4, FlagType.TrainerBattle, "", "BEAUTY_CARLENE");
            CheckMissingFlag(0x4B5, FlagType.TrainerBattle, "", "BEAUTY_JESSICA");
            CheckMissingFlag(0x4B6, FlagType.TrainerBattle, "", "BEAUTY_RACHAEL");
            CheckMissingFlag(0x4B7, FlagType.TrainerBattle, "", "BEAUTY_ANGELICA");
            CheckMissingFlag(0x4B8, FlagType.TrainerBattle, "", "BEAUTY_KENDRA");
            CheckMissingFlag(0x4B9, FlagType.TrainerBattle, "", "BEAUTY_VERONICA");
            CheckMissingFlag(0x4BA, FlagType.TrainerBattle, "", "BEAUTY_JULIA");
            CheckMissingFlag(0x4BB, FlagType.TrainerBattle, "", "BEAUTY_THERESA");
            CheckMissingFlag(0x4BC, FlagType.TrainerBattle, "", "BEAUTY_VALERIE");
            CheckMissingFlag(0x4BD, FlagType.TrainerBattle, "", "FALKNER");
            CheckMissingFlag(0x4BE, FlagType.TrainerBattle, "", "BUGSY");
            CheckMissingFlag(0x4BF, FlagType.TrainerBattle, "", "WHITNEY");
            CheckMissingFlag(0x4C0, FlagType.TrainerBattle, "", "MORTY");
            CheckMissingFlag(0x4C1, FlagType.TrainerBattle, "", "JASMINE");
            CheckMissingFlag(0x4C2, FlagType.TrainerBattle, "", "CHUCK");
            CheckMissingFlag(0x4C3, FlagType.TrainerBattle, "", "PRYCE");
            CheckMissingFlag(0x4C4, FlagType.TrainerBattle, "", "CLAIR");
            CheckMissingFlag(0x4C5, FlagType.TrainerBattle, "", "BROCK");
            CheckMissingFlag(0x4C6, FlagType.TrainerBattle, "", "MISTY");
            CheckMissingFlag(0x4C7, FlagType.TrainerBattle, "", "LTSURGE");
            CheckMissingFlag(0x4C8, FlagType.TrainerBattle, "", "ERIKA");
            CheckMissingFlag(0x4C9, FlagType.TrainerBattle, "", "JANINE");
            CheckMissingFlag(0x4CA, FlagType.TrainerBattle, "", "SABRINA");
            CheckMissingFlag(0x4CB, FlagType.TrainerBattle, "", "BLAINE");
            CheckMissingFlag(0x4CC, FlagType.TrainerBattle, "", "BLUE");
            CheckMissingFlag(0x4CD, FlagType.TrainerBattle, "", "POKEFANM_WILLIAM");
            CheckMissingFlag(0x4CE, FlagType.TrainerBattle, "", "POKEFANM_DEREK");
            CheckMissingFlag(0x4CF, FlagType.TrainerBattle, "", "POKEFANM_ROBERT");
            CheckMissingFlag(0x4D0, FlagType.TrainerBattle, "", "POKEFANM_JOSHUA");
            CheckMissingFlag(0x4D1, FlagType.TrainerBattle, "", "POKEFANM_CARTER");
            CheckMissingFlag(0x4D2, FlagType.TrainerBattle, "", "POKEFANM_TREVOR");
            CheckMissingFlag(0x4D3, FlagType.TrainerBattle, "", "POKEFANM_BRANDON");
            CheckMissingFlag(0x4D4, FlagType.TrainerBattle, "", "POKEFANM_JEREMY");
            CheckMissingFlag(0x4D5, FlagType.TrainerBattle, "", "POKEFANM_COLIN");
            CheckMissingFlag(0x4D6, FlagType.TrainerBattle, "", "POKEFANM_DEREK2");
            CheckMissingFlag(0x4D7, FlagType.TrainerBattle, "", "POKEFANM_DEREK3");
            CheckMissingFlag(0x4D8, FlagType.TrainerBattle, "", "POKEFANM_ALEX");
            CheckMissingFlag(0x4D9, FlagType.TrainerBattle, "", "POKEFANF_BEVERLY");
            CheckMissingFlag(0x4DA, FlagType.TrainerBattle, "", "POKEFANF_RUTH");
            CheckMissingFlag(0x4DB, FlagType.TrainerBattle, "", "POKEFANF_BEVERLY2");
            CheckMissingFlag(0x4DC, FlagType.TrainerBattle, "", "POKEFANF_BEVERLY3");
            CheckMissingFlag(0x4DD, FlagType.TrainerBattle, "", "POKEFANF_GEORGIA");
            //CheckMissingFlag(0x4DE, FlagType.TrainerBattle, "", "unused");
            CheckMissingFlag(0x4DF, FlagType.TrainerBattle, "", "KIMONO_GIRL_NAOKO");
            CheckMissingFlag(0x4E0, FlagType.TrainerBattle, "", "KIMONO_GIRL_SAYO");
            CheckMissingFlag(0x4E1, FlagType.TrainerBattle, "", "KIMONO_GIRL_ZUKI");
            CheckMissingFlag(0x4E2, FlagType.TrainerBattle, "", "KIMONO_GIRL_KUNI");
            CheckMissingFlag(0x4E3, FlagType.TrainerBattle, "", "KIMONO_GIRL_MIKI");
            CheckMissingFlag(0x4E4, FlagType.TrainerBattle, "", "POKEMANIAC_LARRY");
            CheckMissingFlag(0x4E5, FlagType.TrainerBattle, "", "POKEMANIAC_ANDREW");
            CheckMissingFlag(0x4E6, FlagType.TrainerBattle, "", "POKEMANIAC_CALVIN");
            CheckMissingFlag(0x4E7, FlagType.TrainerBattle, "", "POKEMANIAC_SHANE");
            CheckMissingFlag(0x4E8, FlagType.TrainerBattle, "", "POKEMANIAC_BEN");
            CheckMissingFlag(0x4E9, FlagType.TrainerBattle, "", "POKEMANIAC_BRENT");
            CheckMissingFlag(0x4EA, FlagType.TrainerBattle, "", "POKEMANIAC_RON");
            CheckMissingFlag(0x4EB, FlagType.TrainerBattle, "", "POKEMANIAC_ETHAN");
            CheckMissingFlag(0x4EC, FlagType.TrainerBattle, "", "POKEMANIAC_BRENT2");
            CheckMissingFlag(0x4ED, FlagType.TrainerBattle, "", "POKEMANIAC_BRENT3");
            CheckMissingFlag(0x4EE, FlagType.TrainerBattle, "", "POKEMANIAC_ISSAC");
            CheckMissingFlag(0x4EF, FlagType.TrainerBattle, "", "POKEMANIAC_DONALD");
            CheckMissingFlag(0x4F0, FlagType.TrainerBattle, "", "POKEMANIAC_ZACH");
            CheckMissingFlag(0x4F1, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_1");
            CheckMissingFlag(0x4F2, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_2");
            CheckMissingFlag(0x4F3, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_3");
            CheckMissingFlag(0x4F4, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_4");
            CheckMissingFlag(0x4F5, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_5");
            CheckMissingFlag(0x4F6, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_6");
            CheckMissingFlag(0x4F7, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_7");
            CheckMissingFlag(0x4F8, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_8");
            CheckMissingFlag(0x4F9, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_9");
            CheckMissingFlag(0x4FA, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_10");
            CheckMissingFlag(0x4FB, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_11");
            CheckMissingFlag(0x4FC, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_12");
            CheckMissingFlag(0x4FD, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_13");
            CheckMissingFlag(0x4FE, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_14");
            CheckMissingFlag(0x4FF, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_15");
            CheckMissingFlag(0x500, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_16");
            CheckMissingFlag(0x501, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_17");
            CheckMissingFlag(0x502, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_18");
            CheckMissingFlag(0x503, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_19");
            CheckMissingFlag(0x504, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_20");
            CheckMissingFlag(0x505, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_21");
            CheckMissingFlag(0x506, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_22");
            CheckMissingFlag(0x507, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_23");
            CheckMissingFlag(0x508, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_24");
            CheckMissingFlag(0x509, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_25");
            CheckMissingFlag(0x50A, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_26");
            CheckMissingFlag(0x50B, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_27");
            CheckMissingFlag(0x50C, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_28");
            CheckMissingFlag(0x50D, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_29");
            CheckMissingFlag(0x50E, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_30");
            CheckMissingFlag(0x50F, FlagType.TrainerBattle, "", "ROCKET_GRUNTM_31");
            CheckMissingFlag(0x510, FlagType.TrainerBattle, "", "ROCKET_GRUNTF_1");
            CheckMissingFlag(0x511, FlagType.TrainerBattle, "", "ROCKET_GRUNTF_2");
            CheckMissingFlag(0x512, FlagType.TrainerBattle, "", "ROCKET_GRUNTF_3");
            CheckMissingFlag(0x513, FlagType.TrainerBattle, "", "ROCKET_GRUNTF_4");
            CheckMissingFlag(0x514, FlagType.TrainerBattle, "", "ROCKET_GRUNTF_5");
            CheckMissingFlag(0x515, FlagType.TrainerBattle, "", "LASS_CARRIE");
            CheckMissingFlag(0x516, FlagType.TrainerBattle, "", "LASS_BRIDGET");
            CheckMissingFlag(0x517, FlagType.TrainerBattle, "", "LASS_ALICE");
            CheckMissingFlag(0x518, FlagType.TrainerBattle, "", "LASS_KRISE");
            CheckMissingFlag(0x519, FlagType.TrainerBattle, "", "LASS_CONNIE");
            CheckMissingFlag(0x51A, FlagType.TrainerBattle, "", "LASS_LINDA");
            CheckMissingFlag(0x51B, FlagType.TrainerBattle, "", "LASS_LAURA");
            CheckMissingFlag(0x51C, FlagType.TrainerBattle, "", "LASS_SHANNON");
            CheckMissingFlag(0x51D, FlagType.TrainerBattle, "", "LASS_MICHELLE");
            CheckMissingFlag(0x51E, FlagType.TrainerBattle, "", "LASS_DANA");
            CheckMissingFlag(0x51F, FlagType.TrainerBattle, "", "LASS_ELLEN");
            CheckMissingFlag(0x520, FlagType.TrainerBattle, "", "LASS_CONNIE2");
            CheckMissingFlag(0x521, FlagType.TrainerBattle, "", "LASS_CONNIE3");
            CheckMissingFlag(0x522, FlagType.TrainerBattle, "", "LASS_DANA2");
            CheckMissingFlag(0x523, FlagType.TrainerBattle, "", "LASS_DANA3");
            CheckMissingFlag(0x524, FlagType.TrainerBattle, "", "HIKER_ANTHONY2");
            CheckMissingFlag(0x525, FlagType.TrainerBattle, "", "HIKER_RUSSELL");
            CheckMissingFlag(0x526, FlagType.TrainerBattle, "", "HIKER_PHILLIP");
            CheckMissingFlag(0x527, FlagType.TrainerBattle, "", "HIKER_LEONARD");
            CheckMissingFlag(0x528, FlagType.TrainerBattle, "", "HIKER_ANTHONY");
            CheckMissingFlag(0x529, FlagType.TrainerBattle, "", "HIKER_BENJAMIN");
            CheckMissingFlag(0x52A, FlagType.TrainerBattle, "", "HIKER_ERIK");
            CheckMissingFlag(0x52B, FlagType.TrainerBattle, "", "HIKER_MICHAEL");
            CheckMissingFlag(0x52C, FlagType.TrainerBattle, "", "HIKER_PARRY");
            CheckMissingFlag(0x52D, FlagType.TrainerBattle, "", "HIKER_TIMOTHY");
            CheckMissingFlag(0x52E, FlagType.TrainerBattle, "", "HIKER_BAILEY");
            CheckMissingFlag(0x52F, FlagType.TrainerBattle, "", "HIKER_ANTHONY3");
            CheckMissingFlag(0x530, FlagType.TrainerBattle, "", "HIKER_TIM");
            CheckMissingFlag(0x531, FlagType.TrainerBattle, "", "HIKER_NOLAND");
            CheckMissingFlag(0x532, FlagType.TrainerBattle, "", "HIKER_SIDNEY");
            CheckMissingFlag(0x533, FlagType.TrainerBattle, "", "HIKER_KENNY");
            CheckMissingFlag(0x534, FlagType.TrainerBattle, "", "HIKER_JIM");
            CheckMissingFlag(0x535, FlagType.TrainerBattle, "", "HIKER_DANIEL");
            CheckMissingFlag(0x536, FlagType.TrainerBattle, "", "HIKER_PARRY2");
            CheckMissingFlag(0x537, FlagType.TrainerBattle, "", "HIKER_PARRY3");
            CheckMissingFlag(0x538, FlagType.TrainerBattle, "", "BUG_CATCHER_DON");
            CheckMissingFlag(0x539, FlagType.TrainerBattle, "", "BUG_CATCHER_ROB");
            CheckMissingFlag(0x53A, FlagType.TrainerBattle, "", "BUG_CATCHER_ED");
            CheckMissingFlag(0x53B, FlagType.TrainerBattle, "", "BUG_CATCHER_WADE");
            CheckMissingFlag(0x53C, FlagType.TrainerBattle, "", "BUG_CATCHER_BENNY");
            CheckMissingFlag(0x53D, FlagType.TrainerBattle, "", "BUG_CATCHER_AL");
            CheckMissingFlag(0x53E, FlagType.TrainerBattle, "", "BUG_CATCHER_JOSH");
            CheckMissingFlag(0x53F, FlagType.TrainerBattle, "", "BUG_CATCHER_ARNIE");
            CheckMissingFlag(0x540, FlagType.TrainerBattle, "", "BUG_CATCHER_KEN");
            CheckMissingFlag(0x541, FlagType.TrainerBattle, "", "BUG_CATCHER_WADE2");
            CheckMissingFlag(0x542, FlagType.TrainerBattle, "", "BUG_CATCHER_WADE3");
            CheckMissingFlag(0x543, FlagType.TrainerBattle, "", "BUG_CATCHER_DOUG");
            CheckMissingFlag(0x544, FlagType.TrainerBattle, "", "BUG_CATCHER_ARNIE2");
            CheckMissingFlag(0x545, FlagType.TrainerBattle, "", "BUG_CATCHER_ARNIE3");
            CheckMissingFlag(0x546, FlagType.TrainerBattle, "", "OFFICER_KEITH");
            CheckMissingFlag(0x547, FlagType.TrainerBattle, "", "OFFICER_DIRK");
            CheckMissingFlag(0x548, FlagType.TrainerBattle, "", "COOLTRAINERM_NICK");
            CheckMissingFlag(0x549, FlagType.TrainerBattle, "", "COOLTRAINERM_AARON");
            CheckMissingFlag(0x54A, FlagType.TrainerBattle, "", "COOLTRAINERM_PAUL");
            CheckMissingFlag(0x54B, FlagType.TrainerBattle, "", "COOLTRAINERM_CODY");
            CheckMissingFlag(0x54C, FlagType.TrainerBattle, "", "COOLTRAINERM_MIKE");
            CheckMissingFlag(0x54D, FlagType.TrainerBattle, "", "COOLTRAINERM_GAVEN2");
            CheckMissingFlag(0x54E, FlagType.TrainerBattle, "", "COOLTRAINERM_GAVEN3");
            CheckMissingFlag(0x54F, FlagType.TrainerBattle, "", "COOLTRAINERM_RYAN");
            CheckMissingFlag(0x550, FlagType.TrainerBattle, "", "COOLTRAINERM_JAKE");
            CheckMissingFlag(0x551, FlagType.TrainerBattle, "", "COOLTRAINERM_GAVEN");
            CheckMissingFlag(0x552, FlagType.TrainerBattle, "", "COOLTRAINERM_BLAKE");
            CheckMissingFlag(0x553, FlagType.TrainerBattle, "", "COOLTRAINERM_BRIAN");
            CheckMissingFlag(0x554, FlagType.TrainerBattle, "", "COOLTRAINERM_ERICK");
            CheckMissingFlag(0x555, FlagType.TrainerBattle, "", "COOLTRAINERM_ANDY");
            CheckMissingFlag(0x556, FlagType.TrainerBattle, "", "COOLTRAINERM_TYLER");
            CheckMissingFlag(0x557, FlagType.TrainerBattle, "", "COOLTRAINERM_SEAN");
            CheckMissingFlag(0x558, FlagType.TrainerBattle, "", "COOLTRAINERM_KEVIN");
            CheckMissingFlag(0x559, FlagType.TrainerBattle, "", "COOLTRAINERM_STEVE");
            CheckMissingFlag(0x55A, FlagType.TrainerBattle, "", "COOLTRAINERM_ALLEN");
            CheckMissingFlag(0x55B, FlagType.TrainerBattle, "", "COOLTRAINERF_GWEN");
            CheckMissingFlag(0x55C, FlagType.TrainerBattle, "", "COOLTRAINERF_LOIS");
            CheckMissingFlag(0x55D, FlagType.TrainerBattle, "", "COOLTRAINERF_FRAN");
            CheckMissingFlag(0x55E, FlagType.TrainerBattle, "", "COOLTRAINERF_LOLA");
            CheckMissingFlag(0x55F, FlagType.TrainerBattle, "", "COOLTRAINERF_KATE");
            CheckMissingFlag(0x560, FlagType.TrainerBattle, "", "COOLTRAINERF_IRENE");
            CheckMissingFlag(0x561, FlagType.TrainerBattle, "", "COOLTRAINERF_KELLY");
            CheckMissingFlag(0x562, FlagType.TrainerBattle, "", "COOLTRAINERF_JOYCE");
            CheckMissingFlag(0x563, FlagType.TrainerBattle, "", "COOLTRAINERF_BETH");
            CheckMissingFlag(0x564, FlagType.TrainerBattle, "", "COOLTRAINERF_REENA");
            CheckMissingFlag(0x565, FlagType.TrainerBattle, "", "COOLTRAINERF_MEGAN");
            CheckMissingFlag(0x566, FlagType.TrainerBattle, "", "COOLTRAINERF_BETH2");
            CheckMissingFlag(0x567, FlagType.TrainerBattle, "", "COOLTRAINERF_CAROL");
            CheckMissingFlag(0x568, FlagType.TrainerBattle, "", "COOLTRAINERF_QUINN");
            CheckMissingFlag(0x569, FlagType.TrainerBattle, "", "COOLTRAINERF_EMMA");
            CheckMissingFlag(0x56A, FlagType.TrainerBattle, "", "COOLTRAINERF_CYBIL");
            CheckMissingFlag(0x56B, FlagType.TrainerBattle, "", "COOLTRAINERF_JENN");
            CheckMissingFlag(0x56C, FlagType.TrainerBattle, "", "COOLTRAINERF_BETH3");
            CheckMissingFlag(0x56D, FlagType.TrainerBattle, "", "COOLTRAINERF_REENA2");
            CheckMissingFlag(0x56E, FlagType.TrainerBattle, "", "COOLTRAINERF_REENA3");
            CheckMissingFlag(0x56F, FlagType.TrainerBattle, "", "ROCKET_EXECUTIVEF_1");
            CheckMissingFlag(0x570, FlagType.TrainerBattle, "", "ROCKET_EXECUTIVEF_2");
            CheckMissingFlag(0x571, FlagType.TrainerBattle, "", "ROCKET_EXECUTIVEM_1");
            CheckMissingFlag(0x572, FlagType.TrainerBattle, "", "ROCKET_EXECUTIVEM_2");
            CheckMissingFlag(0x573, FlagType.TrainerBattle, "", "ROCKET_EXECUTIVEM_3");
            CheckMissingFlag(0x574, FlagType.TrainerBattle, "", "ROCKET_EXECUTIVEM_4");
            CheckMissingFlag(0x575, FlagType.TrainerBattle, "", "SAILOR_EUGENE");
            CheckMissingFlag(0x576, FlagType.TrainerBattle, "", "SAILOR_HUEY");
            CheckMissingFlag(0x577, FlagType.TrainerBattle, "", "SAILOR_TERRELL");
            CheckMissingFlag(0x578, FlagType.TrainerBattle, "", "SAILOR_KENT");
            CheckMissingFlag(0x579, FlagType.TrainerBattle, "", "SAILOR_ERNEST");
            CheckMissingFlag(0x57A, FlagType.TrainerBattle, "", "SAILOR_JEFF");
            CheckMissingFlag(0x57B, FlagType.TrainerBattle, "", "SAILOR_GARRETT");
            CheckMissingFlag(0x57C, FlagType.TrainerBattle, "", "SAILOR_KENNETH");
            CheckMissingFlag(0x57D, FlagType.TrainerBattle, "", "SAILOR_STANLY");
            CheckMissingFlag(0x57E, FlagType.TrainerBattle, "", "SAILOR_HARRY");
            CheckMissingFlag(0x57F, FlagType.TrainerBattle, "", "SAILOR_HUEY2");
            CheckMissingFlag(0x580, FlagType.TrainerBattle, "", "SAILOR_HUEY3");
            CheckMissingFlag(0x581, FlagType.TrainerBattle, "", "SUPER_NERD_STAN");
            CheckMissingFlag(0x582, FlagType.TrainerBattle, "", "SUPER_NERD_ERIC");
            CheckMissingFlag(0x583, FlagType.TrainerBattle, "", "SUPER_NERD_GREGG");
            CheckMissingFlag(0x584, FlagType.TrainerBattle, "", "SUPER_NERD_JAY");
            CheckMissingFlag(0x585, FlagType.TrainerBattle, "", "SUPER_NERD_DAVE");
            CheckMissingFlag(0x586, FlagType.TrainerBattle, "", "SUPER_NERD_SAM");
            CheckMissingFlag(0x587, FlagType.TrainerBattle, "", "SUPER_NERD_TOM");
            CheckMissingFlag(0x588, FlagType.TrainerBattle, "", "SUPER_NERD_PAT");
            CheckMissingFlag(0x589, FlagType.TrainerBattle, "", "SUPER_NERD_SHAWN");
            CheckMissingFlag(0x58A, FlagType.TrainerBattle, "", "SUPER_NERD_TERU");
            CheckMissingFlag(0x58B, FlagType.TrainerBattle, "", "MEDIUM_MARTHA");
            CheckMissingFlag(0x58C, FlagType.TrainerBattle, "", "MEDIUM_GRACE");
            CheckMissingFlag(0x58D, FlagType.TrainerBattle, "", "MEDIUM_BETHANY");
            CheckMissingFlag(0x58E, FlagType.TrainerBattle, "", "MEDIUM_MARGRET");
            CheckMissingFlag(0x58F, FlagType.TrainerBattle, "", "MEDIUM_ETHEL");
            CheckMissingFlag(0x590, FlagType.TrainerBattle, "", "MEDIUM_REBECCA");
            CheckMissingFlag(0x591, FlagType.TrainerBattle, "", "MEDIUM_DORIS");
            CheckMissingFlag(0x592, FlagType.TrainerBattle, "", "SKIER_ROXANNE");
            CheckMissingFlag(0x593, FlagType.TrainerBattle, "", "SKIER_CLARISSA");
            CheckMissingFlag(0x594, FlagType.TrainerBattle, "", "SWIMMERM_HAROLD");
            CheckMissingFlag(0x595, FlagType.TrainerBattle, "", "SWIMMERM_SIMON");
            CheckMissingFlag(0x596, FlagType.TrainerBattle, "", "SWIMMERM_RANDALL");
            CheckMissingFlag(0x597, FlagType.TrainerBattle, "", "SWIMMERM_CHARLIE");
            CheckMissingFlag(0x598, FlagType.TrainerBattle, "", "SWIMMERM_GEORGE");
            CheckMissingFlag(0x599, FlagType.TrainerBattle, "", "SWIMMERM_BERKE");
            CheckMissingFlag(0x59A, FlagType.TrainerBattle, "", "SWIMMERM_KIRK");
            CheckMissingFlag(0x59B, FlagType.TrainerBattle, "", "SWIMMERM_MATHEW");
            CheckMissingFlag(0x59C, FlagType.TrainerBattle, "", "SWIMMERM_HAL");
            CheckMissingFlag(0x59D, FlagType.TrainerBattle, "", "SWIMMERM_PATON");
            CheckMissingFlag(0x59E, FlagType.TrainerBattle, "", "SWIMMERM_DARYL");
            CheckMissingFlag(0x59F, FlagType.TrainerBattle, "", "SWIMMERM_WALTER");
            CheckMissingFlag(0x5A0, FlagType.TrainerBattle, "", "SWIMMERM_TONY");
            CheckMissingFlag(0x5A1, FlagType.TrainerBattle, "", "SWIMMERM_JEROME");
            CheckMissingFlag(0x5A2, FlagType.TrainerBattle, "", "SWIMMERM_TUCKER");
            CheckMissingFlag(0x5A3, FlagType.TrainerBattle, "", "SWIMMERM_RICK");
            CheckMissingFlag(0x5A4, FlagType.TrainerBattle, "", "SWIMMERM_CAMERON");
            CheckMissingFlag(0x5A5, FlagType.TrainerBattle, "", "SWIMMERM_SETH");
            CheckMissingFlag(0x5A6, FlagType.TrainerBattle, "", "SWIMMERM_JAMES");
            CheckMissingFlag(0x5A7, FlagType.TrainerBattle, "", "SWIMMERM_LEWIS");
            CheckMissingFlag(0x5A8, FlagType.TrainerBattle, "", "SWIMMERM_PARKER");
            CheckMissingFlag(0x5A9, FlagType.TrainerBattle, "", "YOUNGSTER_JOEY");
            CheckMissingFlag(0x5AA, FlagType.TrainerBattle, "", "YOUNGSTER_MIKEY");
            CheckMissingFlag(0x5AB, FlagType.TrainerBattle, "", "YOUNGSTER_ALBERT");
            CheckMissingFlag(0x5AC, FlagType.TrainerBattle, "", "YOUNGSTER_GORDON");
            CheckMissingFlag(0x5AD, FlagType.TrainerBattle, "", "YOUNGSTER_SAMUEL");
            CheckMissingFlag(0x5AE, FlagType.TrainerBattle, "", "YOUNGSTER_IAN");
            CheckMissingFlag(0x5AF, FlagType.TrainerBattle, "", "YOUNGSTER_JOEY2");
            CheckMissingFlag(0x5B0, FlagType.TrainerBattle, "", "YOUNGSTER_JOEY3");
            CheckMissingFlag(0x5B1, FlagType.TrainerBattle, "", "YOUNGSTER_WARREN");
            CheckMissingFlag(0x5B2, FlagType.TrainerBattle, "", "YOUNGSTER_JIMMY");
            CheckMissingFlag(0x5B3, FlagType.TrainerBattle, "", "YOUNGSTER_OWEN");
            CheckMissingFlag(0x5B4, FlagType.TrainerBattle, "", "YOUNGSTER_JASON");
            CheckMissingFlag(0x5B5, FlagType.TrainerBattle, "", "TEACHER_COLETTE");
            CheckMissingFlag(0x5B6, FlagType.TrainerBattle, "", "TEACHER_HILLARY");
            CheckMissingFlag(0x5B7, FlagType.TrainerBattle, "", "TEACHER_SHIRLEY");
            //CheckMissingFlag(0x5B8, FlagType.TrainerBattle, "", "ELITE_4_WILL");
            //CheckMissingFlag(0x5B9, FlagType.TrainerBattle, "", "ELITE_4_KOGA");
            //CheckMissingFlag(0x5BA, FlagType.TrainerBattle, "", "ELITE_4_BRUNO");
            //CheckMissingFlag(0x5BB, FlagType.TrainerBattle, "", "ELITE_4_KAREN");
            //CheckMissingFlag(0x5BC, FlagType.TrainerBattle, "", "CHAMPION_LANCE");

            CheckMissingFlag(0x750, FlagType.GeneralEvent, "", "FOUGHT_SNORLAX");
        }
    }

}
